<?xml version="1.0"?>
<camsourceconfig>

	<!-- Global config options -->
	<camdev>
		<!--
			This section gives config options for the
			camera device. It instructs the hardware to
			grab the frames at a certain size and frame
			rate. Note that not all hardware supports
			every frame size, and not all hardware supports
			setting the frame rate (and if it does, not
			all frame rates are supported either).
			Path defaults to /dev/video0, frame size defaults
			to max size as reported by the driver, fps
			defaults to unchanged. You can put 0 for the fps
			and width/height options to use the default values.
		-->
		<path>/dev/video0</path>
		<width>640</width>
		<height>480</height>
		<fps>15</fps>
	</camdev>

	<!--
		Available modules. A module will only be loaded
		if its "active" attribute is set to "yes", or if
		it's a dependency of another module. In any case,
		any module config given here is used.
	-->
	<module name="wc_serv" active="yes">
		<port>8888</port>

		<!--
			Per-module filter. Works exactly the same as
			the global filters, only that the per-module
			filters are called from within the module's
			worker thread.
		-->
		<filter name="resize">
			<width>320</width>
			<height>240</height>
		</filter>
	</module>
	
	<!--
		A second incarnation of the "wc_serv" module. It is
		possible to run the same worker module multiple times,
		each incarnation in its own thread. Each instance
		must have a unique name (the "alias" attribute). If
		no alias name is given, the actual module name is
		used as alias name. The actual module will always
		be loaded exactly once, if at least one of the aliased
		modules have "active" set to "yes". A module that is
		not active won't be run. A running worker module
		will receive a context pointer to the correct config
		to use, so it's possible to use the same module with
		different parameters/filters.
	-->
	<module name="wc_serv" alias="noresizewc" active="yes">
		<port>8889</port>
	</module>
	
	<!--
		The http module. It lets you create virtual paths to
		serve verious variants of the current image. The main
		section includes global config options (such as the
		port to listen on), and can also include filter definitions.
		Those global filters will be applied to every image
		served.
		In the main section, there should be one or more <vpath>
		sections. Each of these sections describes another
		variation of the image, with different properties,
		using different filters.
		Each vpath definition should contain one or more <path>
		tags, each of which can be used to access this image
		variant (those paths can be thought of as aliases).
		If a vpath section include an <fps> tag, the image
		will be served as multipart-jpeg stream, usable for
		plugin- and applet-less streaming on netscape/mozilla
		browsers. Without fps specification, only a single
		image will be served.
	-->
	<module name="http" active="yes">
		<port>9192</port>
		
		<vpath>
			<path>/</path>
			<path>/small</path>
			
			<filter name="resize">
				<width>320</width>
				<height>240</height>
			</filter>
		</vpath>

		<vpath>
			<path>/big</path>
			<path>/large</path>
		</vpath>
		
		<vpath>
			<path>/multipart</path>
			<fps>2</fps>
			<filter name="resize">
				<width>320</width>
				<height>240</height>
			</filter>
		</vpath>
	</module>
	
	<module name="jpeg_comp" active="yes">
		<!-- quality: default compression quality, 1-100 -->
		<quality>40</quality>
	</module>
	
	<module name="flip" active="yes"/>
	<module name="resize" active="yes"/>
	
	<!--
		Global filters to use. Any filter given here
		will be applied to every grabbed frame. If
		a given filter module is not loaded, the filter
		will be ignored silently. (TODO: is that a good idea?)
		Filters are always applied in order. You can
		give the same filter multiple times to apply
		it to the image several times.
	-->
	<filter name="flip">
		<horiz>yes</horiz>
		<vert>no</vert>
	</filter>
	
</camsourceconfig>

