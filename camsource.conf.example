<?xml version="1.0"?>
<!-- $Id$ -->
<camsourceconfig>

	<!-- Global config options -->
	<camdev>
		<!--
			This section gives config options for the
			camera device. It instructs the hardware to
			grab the frames at a certain size, at a
			certain frame rate and from a certain input
			channel. Note that not all hardware supports
			every frame size, and not all hardware supports
			setting the frame rate (and if it does, not
			all frame rates are supported either).
			
			- Path defaults to /dev/video0.
			- Width and height default to the maximum size
			  as reported by the driver. You can specify
			  "max" or "default" for the same effect,
			  or "min" for the minimum size.
			- Fps and channel default to unchanged/not set.
			  You can specify "default" for the same effect.
		-->
		<path>/dev/video0</path>
		<width>max</width>
		<height>max</height>
		<fps>15</fps>
		<channel>0</channel>
	</camdev>
	
	<!--
		If no logfile is given (or tag is empty), camsource
		will log to stdout only and not go into background.
		The prefix "~/" has the usual meaning.
	-->
	<logfile>~/.camsource.log</logfile>

	<!--
		Available modules. A module will only be loaded
		if its "active" attribute is set to "yes", or if
		it's a dependency of another module. In any case,
		any module config given here is used.
	-->
	<module name="wc_serv" active="yes">
		<port>8888</port>

		<!--
			Per-module filter. Works exactly the same as
			the global filters, only that the per-module
			filters are called from within the module's
			worker thread.
		-->
		<filter name="resize">
			<width>320</width>
			<height>240</height>
		</filter>
		
		<!--
			Another filter. But where is its config? The
			"text" module supports having and using a global
			config, specified in its <module> section. Any
			config options that are missing in the <filter>
			definition will be used from that global config,
			and those options that are specified here will
			override the global ones. See below for an
			example for this overriding.
		-->
		<filter name="text"/>
	</module>
	
	<!--
		A second incarnation of the "wc_serv" module. It is
		possible to run the same worker module multiple times,
		each incarnation in its own thread. Each instance
		must have a unique name (the "alias" attribute). If
		no alias name is given, the actual module name is
		used as alias name. The actual module will always
		be loaded exactly once, if at least one of the aliased
		modules have "active" set to "yes". A module that is
		not active won't be run. A running worker module
		will receive a context pointer to the correct config
		to use, so it's possible to use the same module with
		different parameters/filters.
	-->
	<module name="wc_serv" alias="noresizewc" active="yes">
		<port>8889</port>
		
		<!--
			Here's the example for option overriding in the
			text module. This filter will work the same as
			the above text filter, only that the text will
			be located in the top right corner. (Which doesn't
			make much sense, but hey, it's just an exmaple.)
			For a full description of all config options to
			the text module, see below in its <module> section.
		-->
		<filter name="text">
			<pos>tr</pos>
		</filter>
	</module>
	
	<!--
		The http module. It lets you create virtual paths to
		serve verious variants of the current image. The main
		section includes global config options (such as the
		port to listen on), and can also include filter definitions.
		Those global filters will be applied to every image
		served.
		In the main section, there should be one or more <vpath>
		sections. Each of these sections describes another
		variation of the image, with different properties,
		using different filters.
		If you want to specify a custom jpeg compression quality
		with a <jpegqual> tag, you must specify it within
		the <vpath> definitions. There is no global config
		tag for this.
		Each vpath definition should contain one or more <path>
		tags, each of which can be used to access this image
		variant (those paths can be thought of as aliases).
		If a vpath section include an <fps> tag, the image
		will be served as multipart-jpeg stream, usable for
		plugin- and applet-less streaming on netscape/mozilla
		browsers. Without fps specification, only a single
		image will be served.
	-->
	<module name="http" active="yes">
		<port>9192</port>
		
		<vpath>
			<path>/</path>
			<path>/small</path>
			
			<filter name="resize">
				<width>320</width>
				<height>240</height>
			</filter>

			<filter name="text"/>
		</vpath>

		<vpath>
			<path>/big</path>
			<path>/large</path>
			<filter name="text"/>
		</vpath>
		
		<vpath>
			<path>/multipart</path>
			<fps>2</fps>
			<filter name="resize">
				<width>320</width>
				<height>240</height>
			</filter>

			<filter name="text"/>
		</vpath>

		<vpath>
			<path>/multipart-large</path>
			<fps>1</fps>
			<filter name="text"/>
		</vpath>
	</module>
	
	<!--
		The "filewrite" module does what its name suggests: it
		writes files. More specifically, it writes a snapshot
		jpeg periodically to a certain file location. The write
		happens in a "safe" fashion, meaning the image will
		first be written to a temporary file, and then moved
		over the real destination file.
	-->
	<module name="filewrite" active="no">
		<!--
			Supported options:
			
			- path: Destination filename. The prefix "~/" has
			  the usual meaning.
			- interval: Delay between writing snapshot files.
			  This tag can take an attribute "unit" which
			  can be one of "sec", "min", "hour" or "day".
			  Default is "sec". The meaning should be obvious.
			- chmod: Unix file mode to give the new file, in
			  octal numeric notation. Don't forget the leading
			  zero. If not specified, no chmod will be done
			  (meaning the file will have mode 0666 minus umask).
			- cmd: Optional command to execute when the
			  snapshot is created. The command will get the
			  filename as its first argument. Note that
			  the command will be run on the temporary
			  file, before it is moved to the final location,
			  but after the chmod is done.
			  If the command (shell script) deletes the file,
			  the moving step will be skipped. Note the
			  the value of this tag is executed literally
			  and not passed to a shell to interpret. The
			  stdout and stderr fds will be redirected
			  to the logfile. If you need to have anything
			  fancy for a command, make a shell script.
			- Of course you can add filters here too.
			- And, like with all worker modules, you can
			  have multiple instances/aliases of it too,
			  each with different configurations.
		-->
		<path>/usr/local/apache/htdocs/camera.jpg</path>
		<interval unit="sec">30</interval>
		<chmod>0644</chmod>
		<!-- <cmd>~/bin/snapshot.sh</cmd> -->
		<jpegqual>75</jpegqual>
		<!-- For a description of the <jpegqual> tag, see
			the jpeg_comp module entry -->
		<filter name="text"/>
	</module>
	
	<module name="ftpup" active="no">
		<!--
			Ftpup works like the filewrite module, only that
			it doesn't save a file locally, but uploads it
			to a site via ftp. Supported options are:
			- host: Host to connect to. Can be either in
			  dotted ip notation or a hostname.
			- port: optional, defaults to 21.
			- username & password: Login information. If
			  not specified, anonymous login will be done.
			  Alternate spellings are "user" and "pass".
			- dir: Path for the destination file,
			  excluding the actual filename. The module
			  will do the inital chdir to this dir. This
			  can be an absolute or relative pathname. If
			  not specified, the file will be put into
			  whatever dir is the current dir after login.
			- file: Destination filename
			- passive: A yes/no option, whether to use
			  passive or active mode. Defaults to active
			  mode ("no").
			- safemode: Another yes/no option. If set to
			  yes, a "safe" file write will be done,
			  meaning the snapshot will first be uploaded
			  to a temporary file, which will then be
			  renamed to final destination file. Defaults
			  to "no". The ftp server must support the
			  renaming commands RNFR and RNTO.
			- interval: Same as filewrite's interval.
		-->
		<host>some.host.name</host>
		<port>21</port>
		<user>snapshot</user>
		<pass>snapup</pass>
		<dir>incoming</dir>
		<file>snapshot.jpg</file>
		<passive>no</passive>
		<safemode>yes</safemode>
		<interval unit="sec">30</interval>

		<jpegqual>75</jpegqual>
		<filter name="text"/>
	</module>

	<module name="jpeg_comp" active="yes">
		<!-- quality: default compression quality, 1-100.
			If not specified, defaults to 75. -->
		<quality>40</quality>
		<!--
			The modules which use jpeg_comp may pass a pointer
			to an xml tree to it, which can include a <jpegqual>
			tag. This tag, if present, specifies a quality
			override. Usually you can put this tag into the
			main <module> config section.
		-->
	</module>
	
	<module name="flip" active="yes"/>
	<module name="resize" active="yes"/>
	
	<module name="text" active="yes">
		<!--
			Options to this filter module:
			- text: Text to display. Duh. Mandatory option.
			  The text here is passed into the strftime()
			  function, so the usual % substitutions are
			  performed. Check the strftime man page for
			  details.
			- cmd and file: Ok, so I lied about "text" being
			  mandatory. You must specify at least one of
			  text, cmd or file. "cmd" is the name of a
			  command to run, and the first line of its
			  output (on stdout) will be used as text.
			  Similarily, "file" is a file to open, and its
			  contents will be used as text. The "~/" prefix
			  works as expected. The % substitutions are
			  performed as with the "text" tag, unless you
			  specify the 'nosubst="yes"' attribute in the
			  tag. If more than one of these tags is specified,
			  the last specified will be used (useful for
			  setting a default <text> in the global section,
			  and then overriding it with a <cmd> or <file>
			  in a per-filter config).
			- color: Text color, in html format. The leading
			  # sign is optional. No symbolic color names
			  are accepted. Defaults to white (ffffff).
			- bgcolor: Same as color, only for the background
			  color. It can have the special value "trans"
			  to specify no background drawing (transparent),
			  which is also the default.
			- pos: In which corner of the image to put the
			  text. It can be "tr" for top right corner,
			  "bl" for bottom left or any combination
			  thereof. Defaults to "bl".
		-->
		<text>%b %d %Y %H:%M:%S</text>
		<color>ffffff</color>
		<bgcolor>trans</bgcolor>
		<pos>bl</pos>
	</module>
	
	<!-- This filter swaps the read and blue channels -->
	<module name="rgbbgr" active="no"/>
	
	<!--
		Global filters to use. Any filter given here
		will be applied to every grabbed frame. If
		a given filter module is not loaded, the filter
		will be ignored silently. (TODO: is that a good idea?)
		Filters are always applied in order. You can
		give the same filter multiple times to apply
		it to the image several times.
	-->
	<filter name="flip">
		<horiz>yes</horiz>
		<vert>no</vert>
	</filter>
	
	<!-- Module not active by default -->
	<filter name="rgbbgr"/>
	
</camsourceconfig>

